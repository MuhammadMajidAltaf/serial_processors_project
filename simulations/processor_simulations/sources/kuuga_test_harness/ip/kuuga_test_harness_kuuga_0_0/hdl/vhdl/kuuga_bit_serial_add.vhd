-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kuuga_bit_serial_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arg1_V : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_V : IN STD_LOGIC_VECTOR (31 downto 0);
    sub_flag : IN STD_LOGIC;
    zero_flag : OUT STD_LOGIC_VECTOR (0 downto 0);
    zero_flag_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kuuga_bit_serial_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st6_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal p_Val2_s_reg_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_reg_74 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_zero_reg_84 : STD_LOGIC_VECTOR (0 downto 0);
    signal bvh_d_index_reg_94 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_flag_read_read_fu_44_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_218 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_56 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_218_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_218_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_111_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal index_assign_cast1_fu_117_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_assign_cast1_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_index_assign_cast1_reg_227_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_121_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_fu_141_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_reg_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_165_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_zero_1_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_phi_fu_66_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_phi_fu_77_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal tmp_7_fu_128_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_fu_141_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_bit_i_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_s_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_4_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_105_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_fu_105_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_105_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- bvh_d_index_reg_94 assign process. --
    bvh_d_index_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_105_p2 = ap_const_lv1_0))) then 
                bvh_d_index_reg_94 <= i_fu_111_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                bvh_d_index_reg_94 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- is_zero_reg_84 assign process. --
    is_zero_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_reg_ppstg_exitcond_reg_218_pp0_it2 = ap_const_lv1_0))) then 
                is_zero_reg_84 <= is_zero_1_fu_189_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                is_zero_reg_84 <= sub_flag_read_read_fu_44_p2;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_62 assign process. --
    p_Val2_s_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_reg_ppstg_exitcond_reg_218_pp0_it2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_62 <= p_Result_s_reg_260;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_Val2_s_reg_62 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- rhs_V_reg_74 assign process. --
    rhs_V_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_reg_ppstg_exitcond_reg_218_pp0_it2 = ap_const_lv1_0))) then 
                rhs_V_reg_74 <= r_V_5_reg_265;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                rhs_V_reg_74 <= sub_flag_read_read_fu_44_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_reg_218_pp0_it1 <= exitcond_reg_218;
                    ap_reg_ppstg_index_assign_cast1_reg_227_pp0_it1(5 downto 0) <= index_assign_cast1_reg_227(5 downto 0);
                exitcond_reg_218 <= exitcond_fu_105_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_reg_218_pp0_it2 <= ap_reg_ppstg_exitcond_reg_218_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_fu_105_p2 = ap_const_lv1_0))) then
                    index_assign_cast1_reg_227(5 downto 0) <= index_assign_cast1_fu_117_p1(5 downto 0);
                rhs_V_1_reg_238 <= rhs_V_1_fu_141_p3;
                tmp_reg_232 <= tmp_fu_121_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond_reg_218_pp0_it1 = ap_const_lv1_0))) then
                p_Result_s_reg_260 <= p_Result_s_fu_165_p4;
                r_V_5_reg_265 <= r_V_5_fu_179_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_reg_218_pp0_it1 = ap_const_lv1_0)) then
                r_V_2_reg_255 <= r_V_2_fu_156_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_reg_218 = ap_const_lv1_0))) then
                r_V_3_reg_250 <= r_V_3_fu_152_p2;
                r_V_reg_244 <= r_V_fu_148_p2;
            end if;
        end if;
    end process;
    index_assign_cast1_reg_227(31 downto 6) <= "00000000000000000000000000";
    ap_reg_ppstg_index_assign_cast1_reg_227_pp0_it1(31 downto 6) <= "00000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_105_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_105_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_105_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_2;
                end if;
            when ap_ST_st6_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st6_fsm_2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Val2_s_reg_62;

    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_56 assign process. --
    ap_sig_bdd_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_56 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_56)
    begin
        if (ap_sig_bdd_56) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_2 assign process. --
    ap_sig_cseq_ST_st6_fsm_2_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st6_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_105_p2 <= "1" when (bvh_d_index_reg_94 = ap_const_lv6_20) else "0";
    i_fu_111_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_94) + unsigned(ap_const_lv6_1));
    index_assign_cast1_fu_117_p1 <= std_logic_vector(resize(unsigned(bvh_d_index_reg_94),32));
    is_zero_1_fu_189_p2 <= (is_zero_reg_84 and tmp_5_fu_184_p2);
    not_bit_i_fu_135_p2 <= (tmp_7_fu_128_p3 xor ap_const_lv1_1);
    p_Repl2_s_fu_161_p1 <= std_logic_vector(resize(unsigned(r_V_2_fu_156_p2),64));
    
    p_Result_s_fu_165_p4_proc : process(p_Val2_s_phi_fu_66_p4, ap_reg_ppstg_index_assign_cast1_reg_227_pp0_it1, p_Repl2_s_fu_161_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_s_fu_165_p4 <= p_Val2_s_phi_fu_66_p4;
        if to_integer(unsigned(ap_reg_ppstg_index_assign_cast1_reg_227_pp0_it1)) >= p_Val2_s_phi_fu_66_p4'low and to_integer(unsigned(ap_reg_ppstg_index_assign_cast1_reg_227_pp0_it1)) <= p_Val2_s_phi_fu_66_p4'high then
            result(0) := '0';
            for i in p_Repl2_s_fu_161_p1'range loop
                result(0) := result(0) or p_Repl2_s_fu_161_p1(i);
            end loop;
            p_Result_s_fu_165_p4(to_integer(unsigned(ap_reg_ppstg_index_assign_cast1_reg_227_pp0_it1))) <= result(0);
        end if;
    end process;


    -- p_Val2_s_phi_fu_66_p4 assign process. --
    p_Val2_s_phi_fu_66_p4_assign_proc : process(p_Val2_s_reg_62, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_reg_218_pp0_it2, p_Result_s_reg_260)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_reg_ppstg_exitcond_reg_218_pp0_it2 = ap_const_lv1_0))) then 
            p_Val2_s_phi_fu_66_p4 <= p_Result_s_reg_260;
        else 
            p_Val2_s_phi_fu_66_p4 <= p_Val2_s_reg_62;
        end if; 
    end process;

    r_V_2_fu_156_p2 <= (r_V_reg_244 xor rhs_V_phi_fu_77_p4);
    r_V_3_fu_152_p2 <= (tmp_reg_232 and rhs_V_1_reg_238);
    r_V_4_fu_174_p2 <= (rhs_V_phi_fu_77_p4 and r_V_reg_244);
    r_V_5_fu_179_p2 <= (r_V_3_reg_250 or r_V_4_fu_174_p2);
    r_V_fu_148_p2 <= (tmp_reg_232 xor rhs_V_1_reg_238);
    rhs_V_1_fu_141_p0 <= (0=>sub_flag, others=>'-');
    rhs_V_1_fu_141_p3 <= 
        not_bit_i_fu_135_p2 when (rhs_V_1_fu_141_p0(0) = '1') else 
        tmp_7_fu_128_p3;

    -- rhs_V_phi_fu_77_p4 assign process. --
    rhs_V_phi_fu_77_p4_assign_proc : process(rhs_V_reg_74, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_reg_218_pp0_it2, r_V_5_reg_265)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_reg_ppstg_exitcond_reg_218_pp0_it2 = ap_const_lv1_0))) then 
            rhs_V_phi_fu_77_p4 <= r_V_5_reg_265;
        else 
            rhs_V_phi_fu_77_p4 <= rhs_V_reg_74;
        end if; 
    end process;

    sub_flag_read_read_fu_44_p2 <= (0=>sub_flag, others=>'-');
    tmp_5_fu_184_p2 <= (r_V_2_reg_255 xor ap_const_lv1_1);
    tmp_7_fu_128_p3 <= arg2_V(to_integer(unsigned(index_assign_cast1_fu_117_p1)) downto to_integer(unsigned(index_assign_cast1_fu_117_p1))) when (to_integer(unsigned(index_assign_cast1_fu_117_p1))>= 0 and to_integer(unsigned(index_assign_cast1_fu_117_p1))<=31) else "-";
    tmp_fu_121_p3 <= arg1_V(to_integer(unsigned(index_assign_cast1_fu_117_p1)) downto to_integer(unsigned(index_assign_cast1_fu_117_p1))) when (to_integer(unsigned(index_assign_cast1_fu_117_p1))>= 0 and to_integer(unsigned(index_assign_cast1_fu_117_p1))<=31) else "-";
    zero_flag <= is_zero_reg_84;

    -- zero_flag_ap_vld assign process. --
    zero_flag_ap_vld_assign_proc : process(ap_sig_cseq_ST_st6_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2)) then 
            zero_flag_ap_vld <= ap_const_logic_1;
        else 
            zero_flag_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
